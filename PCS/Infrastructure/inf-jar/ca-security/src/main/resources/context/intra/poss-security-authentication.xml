<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">

	<bean id="springSecurityFilterChain" class="org.springframework.security.util.FilterChainProxy">
		<security:filter-chain-map path-type="ant">

			<!--
				<security:filter-chain pattern="/**"
				filters="httpSessionContextIntegrationFilter,authenticationProcessingFilter,logoutFilter,concurrentSessionFilter"
				/>
			-->
			<security:filter-chain pattern="/**"
				filters="httpSessionContextIntegrationFilter,authenticationProcessingFilter,logoutFilter,loginUserAccessFilter" />
		</security:filter-chain-map>
	</bean>

	<bean id="concurrentSessionFilter"
		class="org.springframework.security.concurrent.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry"></property>
		<property name="expiredUrl">
			<value>/login.jsp?login_error=error_logined_user</value>
		</property>
	</bean>

	<bean id="sessionRegistry"
		class="org.springframework.security.concurrent.SessionRegistryImpl">
	</bean>

	<bean id="concurrentSessionController"
		class="org.springframework.security.concurrent.ConcurrentSessionControllerImpl">
		<property name="sessionRegistry" ref="sessionRegistry" />
		<property name="exceptionIfMaximumExceeded" value="true" />
		<property name="maximumSessions" value="1" />
	</bean>

	<!--
		<bean id="concurrentSessionFilter"
		class="org.springframework.security.concurrent.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry"></property>
		<property name="expiredUrl">
		<value>/login.jsp?login_error=error_logined_user</value> </property>
		</bean>
	-->
	<!--
		<bean id="sessionRegistry"
		class="org.springframework.security.concurrent.SessionRegistryImpl">
		</bean> <bean id="concurrentSessionController"
		class="org.springframework.security.concurrent.ConcurrentSessionControllerImpl">
		<property name="sessionRegistry" ref="sessionRegistry" /> <property
		name="exceptionIfMaximumExceeded" value="true" /> <property
		name="maximumSessions" value="1"/> </bean>
	-->
	<!--
		<bean id="concurrentSessionController"
		class="org.acegisecurity.concurrent.ConcurrentSessionControllerImpl">
		<property name="maximumSessions" value="1"></property> <property
		name="sessionRegistry" ref="sessionRegistry"></property> 一般设置为false.
		为true时, 如果已有一个该用户登录了, 那么在另一个地方登录该用户将抛出异常 如果设置为false, 那么,
		如果已有一个该用户登录了系统, 那么在另一个地方也可以登录, 登录后前者会被逼退出系统 <property
		name="exceptionIfMaximumExceeded" value="true"></property> </bean>
	-->

	<bean id="httpSessionContextIntegrationFilter"
		class="org.springframework.security.context.HttpSessionContextIntegrationFilter">
	</bean>

	<bean id="logoutFilter" class="org.springframework.security.ui.logout.LogoutFilter">
		<!-- session结束时跳转页面 -->
		<constructor-arg value="/login_top.jsp" />
		<constructor-arg>
			<list>
				<bean
					class="org.springframework.security.ui.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/j_spring_security_logout" />
	</bean>
	
	<bean id="userDetailsService"
		class="com.idealunited.poss.security.service.impl.AcegiUserServiceImpl">
		<property name="daoService">
			<ref bean="intra-commonDao" />
		</property>
	</bean>		

	<bean id="authenticationProcessingFilter"
		class="com.idealunited.poss.security.authentication.AuthenticationProcessingFilterExt">
		<property name="authenticationManager" ref="authenticationManager" />
		<!-- 定义登陆失败时转向的页面 -->
		<property name="authenticationFailureUrl">
			<value>/login.jsp</value>
		</property>
		<!-- 定义登陆成功时转向的页面 -->
		<property name="defaultTargetUrl">
			<value>/forwordMain.do</value>
		</property>
		<!-- 定义登陆请求的页面 -->
		<property name="filterProcessesUrl">
			<value>/j_spring_security_check</value>
		</property>
		<!-- 异常与URL映射 -->
		<property name="exceptionMappings">
			<value>
				org.springframework.security.InactiveExeption=/login.jsp?login_error=user_not_active
				org.springframework.security.BadCredentialsException=/login.jsp?login_error=user_psw_error
				org.springframework.security.AuthenticationServiceException=/login.jsp?login_error=db_error
				org.springframework.security.UserAuthNotFoundException=/login.jsp?login_error=userAuth_not_found
				org.springframework.security.SecurityStratetyNotFoundException=/login.jsp?login_error=securityStratety_not_found
				org.springframework.security.LockedExeption=/login.jsp?login_error=user_locked
				org.springframework.security.ChangePasswordExeption=/jsp/security/changePassword.jsp
				org.springframework.security.ErrorLoginExeption=/login.jsp?login_error=code_error
				org.springframework.security.concurrent.ConcurrentLoginException=/login.jsp?login_error=error_logined_user
			</value>
		</property>
		<property name="loginService">
			<ref bean="loginService" />
		</property>
		<property name="userService" ref="userDetailsService"></property>
		<property name="accessAuthorityService" ref="se-accessAuthrityService"></property>
	</bean>

	<bean id="authenticationManager" class="org.springframework.security.providers.ProviderManager">
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider" />
			</list>
		</property>

		<!--
			<property name="sessionController"> <ref
			local="concurrentSessionController" /> </property>
		-->

	</bean>

	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.providers.dao.DaoAuthenticationProvider">

		<!-- 处理UserDetails对象的业务逻辑类，获取用户名密码 -->
		<property name="userDetailsService">
			<ref local="userDetailsService" />
		</property>
		<!-- 对UserDetails对象的缓存 -->
		<!--
			<property name="userCache"> <ref local="userCache" /> </property>
		--><!-- 解密工具：负责对认证库中的密码进行加解密-->

		<property name="passwordEncoder">
			<ref local="POSS.PASSWORDENCODER" />
		</property>
	</bean>

	<!--

		<bean id="passwordEncoder"
		class="org.springframework.security.providers.encoding.PlaintextPasswordEncoder">
		<property name="ignorePasswordCase" value="false" /> </bean>
	-->
	<bean id="POSS.PASSWORDENCODER"
		class="org.springframework.security.providers.encoding.Md5PasswordEncoder">
	</bean>

	<bean id="securityStrategyService"
		class="com.idealunited.poss.security.service.impl.StaticSecurityStrategyServiceImpl">
	</bean>

	<bean id="loginUserAccessFilter"
		class="com.idealunited.poss.security.authentication.LoginUserAccessFilter"
		lazy-init="true">
		<security:custom-filter after="LAST" />
		<property name="faildUrl" value="/login_top.jsp?access_error=no_user" />
		<!--
			如果有不需要过滤的url，直接在notFilterUrls上加，可以添加多个，但用,号分开如 "/abc.do,cda.jsp"
		-->
		<property name="accessLogService" ref="se-accessLogService" />
		<property name="openUrlConfigService" ref="se-openUrlConfigService"></property>
		<property name="noResourceUrl" value="/common/403.jsp?access_error=no_resource"></property>
	</bean>

</beans> 